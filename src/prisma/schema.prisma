datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../model/schema"
  useMultipleFiles                 = false // default is false
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = true // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = true // default is false
}

generator dbml {
  provider              = "prisma-dbml-generator"
  output                = "./"
  outputName            = "schema.dbml"
  projectName           = "FyTy Core Database"
  includeRelationFields = false
}

// enums
enum Lang {
  TH
  EN
}

enum RoomStatus {
  AVAILABLE
  UNAVAILABLE
  CONFIRMED
  FULL
}

enum MemberRole {
  HEAD_COACH
  LEADER
  MANAGER
  MEMBER
}

enum TrainingStatus {
  // the training partner accepts the result
  ACCEPTED
  // the training partner refuses the result (explicitly)
  DENIED
  // halted by admin (via report)
  INEFFECTIVE
  // expired by the system
  EXPIRED
  // the training partner hasn't review yet
  UNREVIEWED
}

enum TrainingSource {
  SYSTEM
  ADMIN
  USER
}

enum PendingStatus {
  INCOMING
  OUTGOING
}

enum AdminRole {
  MANAGEMENT
}

enum NotificationSource {
  SYSTEM
  USER
}

enum NotificationActionResponse {
  ACCEPTED
  DENIED
}

// game
model Game {
  id        String  @id
  name      String  @unique
  teamCap   Int
  lineupCap Int
  logoUrl   String
  coverUrl  String
  isActive  Boolean @default(true)
  desc      String  @default("")

  teams       Team[]
  rooms       Room[]
  userAvatars UserAvatar[]
  reviews     Review[]
}

// notification
model NotifUserRoomRegistration {
  id            String   @id @default(cuid()) @db.Char(25)
  user          User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String   @db.Char(25)
  room          Room     @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId        String   @db.Char(25)
  latestMessage String   @default("")
  unreadCount   Int      @default(0)
  lastSeenAt    DateTime @default(now())

  @@index([userId])
}

model Notification {
  id           String                 @id @default(cuid()) @db.Char(25)
  collection   NotificationCollection @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  collectionId String                 @db.Char(25)
  source       NotificationSource
  title        String
  message      String
  senderUser   User?                  @relation(fields: [senderUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  senderUserId String?                @db.Char(25)
  senderTeam   Team?                  @relation(fields: [senderTeamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  senderTeamId String?                @db.Char(25)
  seenAt       DateTime?
  createdAt    DateTime               @default(now())

  action NotificationAction?

  @@index([collectionId])
}

model NotificationAction {
  id                   String                      @id @default(cuid()) @db.Char(25)
  notification         Notification                @relation(fields: [notificationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  notificationId       String                      @unique @db.Char(25)
  response             NotificationActionResponse?
  teamPending          TeamPending?                @relation(fields: [teamPendingId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  teamPendingId        String?                     @db.Char(25)
  roomPending          RoomPending?                @relation(fields: [roomPendingId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  roomPendingId        String?                     @db.Char(25)
  appointmentPending   AppointmentPending?         @relation(fields: [appointmentPendingId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  appointmentPendingId String?                     @db.Char(25)
  updatedAt            DateTime                    @updatedAt
}

model NotificationCollection {
  id     String @id @default(cuid()) @db.Char(25)
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique @db.Char(25)

  notifications Notification[]
}

// room
model Room {
  id         String     @id @default(cuid()) @db.Char(25)
  name       String
  status     RoomStatus @default(AVAILABLE)
  option     String     @default("")
  startAt    DateTime
  endAt      DateTime
  isPrivate  Boolean    @default(false)
  teamCount  Int        @default(1)
  note       String     @default("")
  game       Game       @relation(fields: [gameId], references: [id], onUpdate: Cascade)
  gameId     String
  hostTeam   Team       @relation(fields: [hostTeamId], references: [id], onUpdate: Cascade)
  hostTeamId String     @db.Char(25)
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())

  userNotifRegistrations NotifUserRoomRegistration[]
  pendings               RoomPending[]
  members                RoomMember[]
  chat                   Chat?
  appointment            Appointment?
  lineups                RoomLineup[]
  settings               RoomSettings?

  @@index([startAt])
  @@index([endAt])
}

model RoomSettings {
  id     String @id @default(cuid()) @db.Char(25)
  room   Room   @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId String @unique @db.Char(25)
}

model RoomMember {
  id       String   @id @default(cuid()) @db.Char(25)
  team     Team     @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId   String   @db.Char(25)
  room     Room     @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId   String   @db.Char(25)
  joinedAt DateTime @default(now())

  roomLineups RoomLineup[]

  @@unique([teamId, roomId])
}

model RoomLineup {
  id           String     @id @default(cuid()) @db.Char(25)
  teamLineup   TeamLineup @relation(fields: [teamLineupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamLineupId String     @db.Char(25)
  roomMember   RoomMember @relation(fields: [roomMemberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomMemberId String     @db.Char(25)
  room         Room       @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId       String     @db.Char(25)

  @@unique([teamLineupId, roomMemberId, roomId])
}

model RoomPending {
  id        String        @id @default(cuid()) @db.Char(25)
  team      Team          @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId    String        @db.Char(25)
  room      Room          @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId    String        @db.Char(25)
  status    PendingStatus @default(INCOMING)
  createdAt DateTime      @default(now())

  lineups                   RoomPendingLineup[]
  linkedNotificationActions NotificationAction[]

  @@unique([teamId, roomId])
}

model RoomPendingLineup {
  id            String      @id @default(cuid()) @db.Char(25)
  roomPending   RoomPending @relation(fields: [roomPendingId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomPendingId String      @db.Char(25)
  teamLineup    TeamLineup  @relation(fields: [teamLineupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamLineupId  String      @db.Char(25)

  @@unique([roomPendingId, teamLineupId])
}

// team
model Team {
  id               String   @id @default(cuid()) @db.Char(25)
  name             String
  coverUrl         String   @default("")
  logoUrl          String   @default("")
  tier             String   @default("")
  isPrivate        Boolean  @default(false)
  bookBank         String   @default("")
  game             Game     @relation(fields: [gameId], references: [id], onUpdate: Cascade)
  gameId           String
  founder          User?    @relation(fields: [founderId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  founderId        String?  @db.Char(25)
  designatorTeam   Team?    @relation(fields: [designatorTeamId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "designator")
  designatorTeamId String?  @db.Char(25)
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())

  sendingNotifications Notification[]
  designatedTeams      Team[]               @relation("designator")
  lineups              TeamLineup[]
  pendings             TeamPending[]
  members              TeamMember[]
  roomHosts            Room[]
  roomPendings         RoomPending[]
  roomMembers          RoomMember[]
  messages             Message[]
  appointmentMembers   AppointmentMember[]
  appointmentInviters  AppointmentPending[] @relation("inviter")
  appointmentInvitees  AppointmentPending[] @relation("invitee")
  trainingHosts        Training[]           @relation("host")
  trainingGuests       Training[]           @relation("guest")
  stats                TeamStats?
  settings             TeamSettings?
  trainingReports      TrainingReport[]
}

model TeamSettings {
  id               String  @id @default(cuid()) @db.Char(25)
  team             Team    @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId           String  @unique @db.Char(25)
  isJoiningEnabled Boolean @default(true)
}

model TeamMember {
  id       String     @id @default(cuid()) @db.Char(25)
  role     MemberRole @default(MEMBER)
  team     Team       @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId   String     @db.Char(25)
  user     User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId   String     @db.Char(25)
  joinedAt DateTime   @default(now())
}

model TeamLineup {
  id         String      @id @default(cuid()) @db.Char(25)
  team       Team        @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId     String      @db.Char(25)
  avatar     UserAvatar? @relation(fields: [avatarId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  avatarId   String?     @db.Char(25)
  inGameId   String?
  isDefault  Boolean     @default(false)
  profileUrl String      @default("")
  imageUrl   String      @default("")
  name       String      @default("new player")
  note       String      @default("")
  updatedAt  DateTime    @updatedAt
  createdAt  DateTime    @default(now())

  trainingLineups    TrainingLineup[]
  roomLineups        RoomLineup[]
  roomPendingLineups RoomPendingLineup[]
}

model TeamPending {
  id        String        @id @default(cuid()) @db.Char(25)
  team      Team          @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId    String        @db.Char(25)
  user      User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String        @db.Char(25)
  status    PendingStatus @default(INCOMING)
  createdAt DateTime      @default(now())

  linkedNotificationActions NotificationAction[]

  @@unique([teamId, userId])
}

// user
model User {
  id                   String    @id @default(cuid()) @db.Char(25)
  username             String    @unique
  updatedUsernameAt    DateTime?
  mobilePhone          String    @unique
  updatedMobilePhoneAt DateTime?
  password             String
  displayName          String
  /// @zod.string.email()
  email                String?   @unique
  updatedEmailAt       DateTime?
  bio                  String    @default("")
  portraitUrl          String    @default("")
  coverUrl             String    @default("")
  isVerified           Boolean   @default(false)
  isDeactivated        Boolean   @default(false)
  facebookId           String?   @unique
  googleId             String?   @unique
  lineId               String?   @unique
  lineToken            String?   @unique
  firstLoginAt         DateTime?
  lastLoginAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  notificationCollection NotificationCollection?
  roomNotifRegistrations NotifUserRoomRegistration[]
  sendingNotifications   Notification[]
  teamFounders           Team[]
  teamPendings           TeamPending[]
  teamMembers            TeamMember[]
  avatars                UserAvatar[]
  reviewers              Review[]                    @relation("reviewer")
  reviewees              Review[]                    @relation("reviewee")
  messages               Message[]
  settings               UserSettings?
  passwordResetSession   PasswordResetSession?
  trainingReports        TrainingReport[]
}

model UserSettings {
  id                             String  @id @default(cuid()) @db.Char(25)
  user                           User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId                         String  @unique @db.Char(25)
  isNotifiedBeforeTrainingMinute Int     @default(60)
  isTeamNotified                 Boolean @default(true)
  isMeNotified                   Boolean @default(true)
  isRoomNotified                 Boolean @default(true)
  lang                           Lang    @default(TH)
}

model PasswordResetSession {
  id           String   @id @default(cuid()) @db.Char(25)
  user         User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       String   @unique @db.Char(25)
  token        String   @unique
  attemptCount Int      @default(0)
  expiredAt    DateTime
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model UserAvatar {
  id            String  @id @default(cuid()) @db.Char(25)
  inGameId      String
  characterName String  @default("")
  rank          String
  ratingScore   Decimal @default(0.0)
  game          Game    @relation(fields: [gameId], references: [id], onUpdate: Cascade)
  gameId        String
  user          User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        String  @db.Char(25)

  teamLineups TeamLineup[]
}

// review
model Review {
  id          String   @id @default(cuid()) @db.Char(25)
  content     String
  ratingScore Decimal  @default(0.0)
  reviewer    User?    @relation(fields: [reviewerId], references: [id], onUpdate: Cascade, onDelete: SetNull, name: "reviewer")
  reviewerId  String?  @db.Char(25)
  reviewee    User     @relation(fields: [revieweeId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "reviewee")
  revieweeId  String   @db.Char(25)
  game        Game     @relation(fields: [gameId], references: [id], onUpdate: Cascade)
  gameId      String
  createdAt   DateTime @default(now())
}

// appointment
model Appointment {
  id              String    @id @default(cuid()) @db.Char(25)
  startAt         DateTime
  endAt           DateTime
  deletedBeforeAt DateTime?
  isDeleted       Boolean   @default(false)
  room            Room?     @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  roomId          String?   @unique @db.Char(25)
  createdAt       DateTime  @default(now())

  members  AppointmentMember[]
  training Training?
  pending  AppointmentPending?
}

model AppointmentPending {
  id            String      @id @default(cuid()) @db.Char(25)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appointmentId String      @unique @db.Char(25)
  inviterTeam   Team        @relation(fields: [inviterTeamId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "inviter")
  inviterTeamId String      @db.Char(25)
  inviteeTeam   Team        @relation(fields: [inviteeTeamId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "invitee")
  inviteeTeamId String      @db.Char(25)
  createdAt     DateTime    @default(now())

  linkedNotificationActions NotificationAction[]

  @@unique([appointmentId, inviterTeamId, inviteeTeamId])
}

model AppointmentMember {
  id            String      @id @default(cuid()) @db.Char(25)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appointmentId String      @db.Char(25)
  team          Team        @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId        String      @db.Char(25)
  isLeft        Boolean     @default(false)
  createdAt     DateTime    @default(now())

  @@unique([appointmentId, teamId])
}

// chat
model Chat {
  id     String @id @default(cuid()) @db.Char(25)
  room   Room   @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId String @unique @db.Char(25)

  messages Message[]
}

model Message {
  id        String   @id @default(cuid()) @db.Char(25)
  chat      Chat     @relation(fields: [chatId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  chatId    String   @db.Char(25)
  reply     Message? @relation(fields: [replyId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "reply")
  replyId   String?  @db.Char(25)
  imageUrls String[] @default([])
  team      Team?    @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  teamId    String?  @db.Char(25)
  sender    User?    @relation(fields: [senderId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  senderId  String?  @db.Char(25)
  message   String
  createdAt DateTime @default(now())

  repliedMessages Message[] @relation("reply")

  @@index([chatId])
}

// stats
model TeamStats {
  id                     String   @id @default(cuid()) @db.Char(25)
  team                   Team     @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId                 String   @unique @db.Char(25)
  leftWhileTrainingCount Int      @default(0)
  completedTrainingCount Int      @default(0)
  trainingMinute         Int      @default(0)
  trainingCount          Int      @default(0)
  winCount               Int      @default(0)
  loseCount              Int      @default(0)
  tieCount               Int      @default(0)
  perGameWinCount        Int      @default(0)
  perGameLoseCount       Int      @default(0)
  updateAt               DateTime @updatedAt
}

// FIXME: the table is support only 2-team games
model Training {
  id            String         @id @default(cuid()) @db.Char(25)
  appointment   Appointment    @relation(fields: [appointmentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appointmentId String         @unique @db.Char(25)
  host          Team?          @relation(fields: [hostId], references: [id], onUpdate: Cascade, onDelete: SetNull, name: "host")
  hostId        String?        @db.Char(25)
  guest         Team?          @relation(fields: [guestId], references: [id], onUpdate: Cascade, onDelete: SetNull, name: "guest")
  guestId       String?        @db.Char(25)
  hostWinCount  Int?
  hostLoseCount Int?
  note          String         @default("")
  status        TrainingStatus @default(UNREVIEWED)
  source        TrainingSource @default(SYSTEM)
  imageUrls     String[]       @default([])
  isSubmitted   Boolean        @default(false)
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())

  reports TrainingReport[]
  lineups TrainingLineup[]

  @@index([createdAt, isSubmitted, source])
  @@index([createdAt, status, source])
}

model TrainingLineup {
  id         String     @id @default(cuid()) @db.Char(25)
  training   Training   @relation(fields: [trainingId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  trainingId String     @db.Char(25)
  lineup     TeamLineup @relation(fields: [lineupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  lineupId   String     @db.Char(25)

  @@unique([trainingId, lineupId])
}

model TrainingReport {
  id              String   @id @default(cuid()) @db.Char(25)
  reporterUser    User?    @relation(fields: [reporterUserId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  reporterUserId  String?  @db.Char(25)
  reporterTeam    Team?    @relation(fields: [reporterTeamId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  reporterTeamId  String?  @db.Char(25)
  training        Training @relation(fields: [trainingId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  trainingId      String   @db.Char(25)
  isAdminReviewed Boolean  @default(false)
  heading         String
  content         String
  imageUrls       String[] @default([])
  createdAt       DateTime @default(now())
}

// admin
model Admin {
  id        String    @id @default(cuid()) @db.Char(25)
  /// @zod.string.email()
  email     String    @unique
  password  String
  role      AdminRole @default(MANAGEMENT)
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}
